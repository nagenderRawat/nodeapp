
def isWrongPullReqUseCase = ("${env.CHANGE_BRANCH}" =~ '^(teams/).*$' && "${env.CHANGE_TARGET}" =~ 'qa')
def shouldSkipChecks =  (("${env.CHANGE_BRANCH}" =~ 'qa' && "${env.CHANGE_TARGET}" =~ '^(teams/).*$') || ("${env.CHANGE_BRANCH}" =~ 'master' &&  "${env.CHANGE_TARGET}" =~ 'qa'))
echo "................... source ========= ${env.CHANGE_BRANCH}"
echo "................... target ========= ${env.CHANGE_TARGET}"
pullId = "${env.CHANGE_ID}"
def buildDeploy() {            
    stage('Build And Push Image'){
        // when {
        //     expression {
        //         return env.useGithubAction  != 'true'
        //     }
        // }
        script {
            echo "docker build"
            // dockerApi.buildImage()
            // dockerApi.dockerTag(utils.targetEnvironment + '-' + prImageTag)
        }
    }
    stage('Updating Image Tags'){
        // when {
        //     expression {
        //         return env.useGithubAction  != 'true'
        //     }
        // }
        script {
            echo "docker tag"
            // dockerApi.updateLatestDockertags() // Set old 'environment-latest' tagged docker image to 'environment-previous' tag & set 'environment-latest' tag to the new built image
        }
    }    
}

def triggerChecks(){
    echo "trigger new Job..."
    build job: 'oh-api/oh-api-lint', parameters: [[$class: 'StringParameterValue', name: 'branch_name', value: 'testjenkins'],
    [$class: 'StringParameterValue', name: 'pullId', value: '${pullId}'],
    [$class: 'StringParameterValue', name: 'repo', value: 'nodeapp']]
  // triggerRemoteJob mode: [$class: 'TrackProgressAwaitResult', scheduledTimeout: [timeoutStr: ''], startedTimeout: [timeoutStr: ''], timeout: [timeoutStr: '1d'], whenFailure: [$class: 'StopAsFailure'], whenScheduledTimeout: [$class: 'ContinueAsIs'], whenStartedTimeout: [$class: 'ContinueAsIs'], whenTimeout: [$class: 'ContinueAsFailure'], whenUnstable: [$class: 'ContinueAsUnstable']],
  // parameterFactories: [
  //   [$class: 'CurrentBuild', excludesStr: '', includeSensitive: false],
  //   [$class: 'SimpleString', name: 'branch_name', value: "${env.CHANGE_BRANCH}"],
  //   [$class: 'SimpleString', name: 'repo', value: "${utils.repoName}"],
  //   [$class: 'SimpleString', name: 'pullId', value: "${pullId}"],
  //   ], remotePathMissing: [$class: 'ContinueAsIs'], remotePathUrl: "jenkins://0f512b00c7f3d4ad1076556b8a13afd2/${utils.projectName}/${repositoryName}-lint"
}

def triggerTests(){
    echo "trigger new Job..."
    build job: 'oh-api/oh-api-test', parameters: [[$class: 'StringParameterValue', name: 'branch_name', value: "testjenkins"],
    [$class: 'StringParameterValue', name: 'pullId', value: "5"],
    [$class: 'StringParameterValue', name: 'repo', value: "nodeapp"]]
}

checksJobs = [
    "Lint Checks": {
        triggerChecks()
    },
    "Test Checks": {
        triggerTests()
    }
]
checksJobs.failFast = true

pipeline {
    agent
    {
        node {
            label 'master'
            customWorkspace "${env.JobPath}"
        }
    }
    environment {
        CI = 'true'
        HOME = '.'
    }
    stages {
        stage('Branch Check') {
            steps {
                script {
                    // if (isWrongPullReqUseCase) { 
                        echo "wrong PR use case..........."  
                        repository_url = scm.userRemoteConfigs[0].url
                        repository_name = repository_url.replace("git@github.com:","").replace(".git","")
                        echo "wrong PR use case...${repository_url}....${repository_name}...."  
                        
                        withCredentials([string(credentialsId: 'Token-GIT', variable: 'Token')]) {
                            echo "GITHUB_TOKEN............. ${Token}"
                            sh "curl -s -H \"Authorization: token ${Token}\" -X POST -d '{\"body\": \"Team branch cannot be merge to qa directly...: ${env.RUN_DISPLAY_URL}\"}' \"https://api.github.com/repos/nagenderRawat/${repository_name}/issues/${pullId}/comments\""
                            // close the PR
                        }
                    // } 
                    // else {
                    //     GChatNotify ('STARTED', CHATROOM_URL, this)         
                    //     writeFile file: "fingerprintfile.sh", text: "echo Built ${env.BUILD_NUMBER} of ${env.JOB_NAME}"
                    //     // Archive the build output artifacts.
                    //     archiveArtifacts artifacts: 'fingerprintfile.sh', fingerprint: true   
                    // }                   
                }
            }
        }
        stage('Review Check') {
            steps {
                echo "approved checks"
            }
        }
        stage('Stage Trigger') {
            steps {
                script {                        
                    if (true) {                        
                        stage('Checks') {
                            echo "lintjob"
                            script {
                                parallel(checksJobs)
                            }    
                        }
                    }
                    buildDeploy()
                }                                                    
            }
        }
    }
}
